/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface L2fiMarketRouterInterface extends ethers.utils.Interface {
  functions: {
    "doERC1155TransferIn(uint256,address,uint256)": FunctionFragment;
    "doERC20TransferIn(address,address,uint256)": FunctionFragment;
    "execute(uint256,bytes)": FunctionFragment;
    "executeBatch(uint256,bytes[])": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "optionIdToMarket(uint256)": FunctionFragment;
    "optionTokens()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerMarket(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "whitelistedMarkets(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "doERC1155TransferIn",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doERC20TransferIn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "optionIdToMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optionTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarket",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedMarkets",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "doERC1155TransferIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doERC20TransferIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionIdToMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedMarkets",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class L2fiMarketRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: L2fiMarketRouterInterface;

  functions: {
    doERC1155TransferIn(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "doERC1155TransferIn(uint256,address,uint256)"(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    doERC20TransferIn(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "doERC20TransferIn(address,address,uint256)"(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(uint256,bytes)"(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeBatch(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeBatch(uint256,bytes[])"(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _optionTokens: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _optionTokens: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    optionIdToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "optionIdToMarket(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    optionTokens(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionTokens()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proxiableUUID(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    registerMarket(
      _optionId: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerMarket(uint256,address)"(
      _optionId: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    whitelistedMarkets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "whitelistedMarkets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  doERC1155TransferIn(
    _optionTokenId: BigNumberish,
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "doERC1155TransferIn(uint256,address,uint256)"(
    _optionTokenId: BigNumberish,
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  doERC20TransferIn(
    _quoteToken: string,
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "doERC20TransferIn(address,address,uint256)"(
    _quoteToken: string,
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    _optionId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(uint256,bytes)"(
    _optionId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeBatch(
    _optionId: BigNumberish,
    _dataArray: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeBatch(uint256,bytes[])"(
    _optionId: BigNumberish,
    _dataArray: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _optionTokens: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _optionTokens: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  optionIdToMarket(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "optionIdToMarket(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  optionTokens(overrides?: CallOverrides): Promise<string>;

  "optionTokens()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  registerMarket(
    _optionId: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerMarket(uint256,address)"(
    _optionId: BigNumberish,
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  whitelistedMarkets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whitelistedMarkets(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    doERC1155TransferIn(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "doERC1155TransferIn(uint256,address,uint256)"(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    doERC20TransferIn(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "doERC20TransferIn(address,address,uint256)"(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "execute(uint256,bytes)"(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBatch(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBatch(uint256,bytes[])"(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_optionTokens: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _optionTokens: string,
      overrides?: CallOverrides
    ): Promise<void>;

    optionIdToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "optionIdToMarket(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    optionTokens(overrides?: CallOverrides): Promise<string>;

    "optionTokens()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    registerMarket(
      _optionId: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerMarket(uint256,address)"(
      _optionId: BigNumberish,
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedMarkets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelistedMarkets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    BeaconUpgraded(beacon: string | null): EventFilter;

    Initialized(version: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimateGas: {
    doERC1155TransferIn(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "doERC1155TransferIn(uint256,address,uint256)"(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    doERC20TransferIn(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "doERC20TransferIn(address,address,uint256)"(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(uint256,bytes)"(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeBatch(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeBatch(uint256,bytes[])"(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _optionTokens: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _optionTokens: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    optionIdToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "optionIdToMarket(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "optionTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerMarket(
      _optionId: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerMarket(uint256,address)"(
      _optionId: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    whitelistedMarkets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedMarkets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    doERC1155TransferIn(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "doERC1155TransferIn(uint256,address,uint256)"(
      _optionTokenId: BigNumberish,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    doERC20TransferIn(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "doERC20TransferIn(address,address,uint256)"(
      _quoteToken: string,
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256,bytes)"(
      _optionId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeBatch(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeBatch(uint256,bytes[])"(
      _optionId: BigNumberish,
      _dataArray: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _optionTokens: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _optionTokens: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    optionIdToMarket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionIdToMarket(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerMarket(
      _optionId: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerMarket(uint256,address)"(
      _optionId: BigNumberish,
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedMarkets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedMarkets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
