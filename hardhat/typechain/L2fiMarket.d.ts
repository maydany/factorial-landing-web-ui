/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface L2fiMarketInterface extends ethers.utils.Interface {
  functions: {
    "FEE_ONE_PERCENT_PRECISION()": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "closeTime()": FunctionFragment;
    "downsizingScale()": FunctionFragment;
    "feeCallback(uint256)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getOrderbook(uint256)": FunctionFragment;
    "initialize(address,uint256,address,address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "makerFee()": FunctionFragment;
    "minimumOrderAmount()": FunctionFragment;
    "nextOrderIds(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "openShortcut(uint256,uint256)": FunctionFragment;
    "openTime()": FunctionFragment;
    "optionTokenId()": FunctionFragment;
    "optionTokens()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBuyOrder(tuple)": FunctionFragment;
    "placeSellOrder(tuple)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setCaller(address)": FunctionFragment;
    "setCloseTime(uint256)": FunctionFragment;
    "setMakerFee(int256)": FunctionFragment;
    "setMinimumOrderAmount(uint256)": FunctionFragment;
    "setOpenTime(uint256)": FunctionFragment;
    "setTakerFee(int256)": FunctionFragment;
    "settleDebt()": FunctionFragment;
    "slot()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "takerFee()": FunctionFragment;
    "tickBitMaps(uint8)": FunctionFragment;
    "tickInfos(uint16)": FunctionFragment;
    "tickPriceModel()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_ONE_PERCENT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "closeTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "downsizingScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCallback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderbook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "makerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumOrderAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openShortcut",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "openTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optionTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBuyOrder",
    values: [{ optionAmount: BigNumberish; tick: BigNumberish; isBuy: boolean }]
  ): string;
  encodeFunctionData(
    functionFragment: "placeSellOrder",
    values: [{ optionAmount: BigNumberish; tick: BigNumberish; isBuy: boolean }]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setCaller", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCloseTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMakerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumOrderAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTakerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "slot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "takerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickBitMaps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tickPriceModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_ONE_PERCENT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "downsizingScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumOrderAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortcut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCaller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCloseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMakerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumOrderAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTakerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settleDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickBitMaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickPriceModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CancelOrder(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MakeOrder(uint256,address,uint256,bool)": EventFragment;
    "MatchOrder(uint256,address,uint256)": EventFragment;
    "OpenShortcut(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenShortcut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class L2fiMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: L2fiMarketInterface;

  functions: {
    FEE_ONE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "FEE_ONE_PERCENT_PRECISION()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrder(uint256)"(
      _orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "closeTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    downsizingScale(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "downsizingScale()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    feeCallback(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "feeCallback(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeCollector()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getOrderbook(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      buyTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      sellTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      0: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      1: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    }>;

    "getOrderbook(uint256)"(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      buyTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      sellTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      0: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      1: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    }>;

    initialize(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,address,address,address,address,uint256,uint256,uint256,uint256)"(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    makerFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "makerFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minimumOrderAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minimumOrderAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    nextOrderIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nextOrderIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    openShortcut(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openShortcut(uint256,uint256)"(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    openTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "openTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    optionTokenId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "optionTokenId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    optionTokens(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionTokens()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      downsizedOptionAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      downsizedOptionAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    placeBuyOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "placeBuyOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    placeSellOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "placeSellOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    quoteToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "quoteToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "router()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    setCaller(
      _caller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCloseTime(uint256)"(
      _closeTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMakerFee(
      _makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMakerFee(int256)"(
      _makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumOrderAmount(
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumOrderAmount(uint256)"(
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOpenTime(uint256)"(
      _openTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTakerFee(
      _takerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTakerFee(int256)"(
      _takerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleDebt(overrides?: Overrides): Promise<ContractTransaction>;

    "settleDebt()"(overrides?: Overrides): Promise<ContractTransaction>;

    slot(overrides?: CallOverrides): Promise<{
      caller: string;
      maxBuyTick: number;
      minSellTick: number;
      optionTokenDebt: BigNumber;
      quoteTokenDebt: BigNumber;
      feePayable: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "slot()"(overrides?: CallOverrides): Promise<{
      caller: string;
      maxBuyTick: number;
      minSellTick: number;
      optionTokenDebt: BigNumber;
      quoteTokenDebt: BigNumber;
      feePayable: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    takerFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "takerFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tickBitMaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tickBitMaps(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tickInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      first: BigNumber;
      last: BigNumber;
      totalDownsizedOptionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "tickInfos(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      first: BigNumber;
      last: BigNumber;
      totalDownsizedOptionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    tickPriceModel(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tickPriceModel()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  FEE_ONE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  "FEE_ONE_PERCENT_PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  cancelOrder(
    _orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrder(uint256)"(
    _orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeTime(overrides?: CallOverrides): Promise<BigNumber>;

  "closeTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  downsizingScale(overrides?: CallOverrides): Promise<BigNumber>;

  "downsizingScale()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeCallback(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "feeCallback(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  "feeCollector()"(overrides?: CallOverrides): Promise<string>;

  getOrderbook(
    maxCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    buyTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    sellTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    0: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    1: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
  }>;

  "getOrderbook(uint256)"(
    maxCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    buyTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    sellTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    0: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    1: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
  }>;

  initialize(
    _optionTokens: string,
    _optionTokenId: BigNumberish,
    _quoteToken: string,
    _router: string,
    _feeCollector: string,
    _tickPriceModel: string,
    _downsizingScale: BigNumberish,
    _openTime: BigNumberish,
    _closeTime: BigNumberish,
    _minimumOrderAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,address,address,address,address,uint256,uint256,uint256,uint256)"(
    _optionTokens: string,
    _optionTokenId: BigNumberish,
    _quoteToken: string,
    _router: string,
    _feeCollector: string,
    _tickPriceModel: string,
    _downsizingScale: BigNumberish,
    _openTime: BigNumberish,
    _closeTime: BigNumberish,
    _minimumOrderAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  makerFee(overrides?: CallOverrides): Promise<BigNumber>;

  "makerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  minimumOrderAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumOrderAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextOrderIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nextOrderIds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  openShortcut(
    _fromOrderId: BigNumberish,
    _toOrderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openShortcut(uint256,uint256)"(
    _fromOrderId: BigNumberish,
    _toOrderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  openTime(overrides?: CallOverrides): Promise<BigNumber>;

  "openTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  optionTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "optionTokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  optionTokens(overrides?: CallOverrides): Promise<string>;

  "optionTokens()"(overrides?: CallOverrides): Promise<string>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    downsizedOptionAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  "orders(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    downsizedOptionAmount: BigNumber;
    0: string;
    1: BigNumber;
  }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  placeBuyOrder(
    _orderParam: {
      optionAmount: BigNumberish;
      tick: BigNumberish;
      isBuy: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "placeBuyOrder((uint256,uint16,bool))"(
    _orderParam: {
      optionAmount: BigNumberish;
      tick: BigNumberish;
      isBuy: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  placeSellOrder(
    _orderParam: {
      optionAmount: BigNumberish;
      tick: BigNumberish;
      isBuy: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "placeSellOrder((uint256,uint16,bool))"(
    _orderParam: {
      optionAmount: BigNumberish;
      tick: BigNumberish;
      isBuy: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  "quoteToken()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setCaller(
    _caller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCaller(address)"(
    _caller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCloseTime(
    _closeTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCloseTime(uint256)"(
    _closeTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMakerFee(
    _makerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMakerFee(int256)"(
    _makerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumOrderAmount(
    _minimumOrderAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumOrderAmount(uint256)"(
    _minimumOrderAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOpenTime(
    _openTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOpenTime(uint256)"(
    _openTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTakerFee(
    _takerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTakerFee(int256)"(
    _takerFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleDebt(overrides?: Overrides): Promise<ContractTransaction>;

  "settleDebt()"(overrides?: Overrides): Promise<ContractTransaction>;

  slot(overrides?: CallOverrides): Promise<{
    caller: string;
    maxBuyTick: number;
    minSellTick: number;
    optionTokenDebt: BigNumber;
    quoteTokenDebt: BigNumber;
    feePayable: BigNumber;
    0: string;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "slot()"(overrides?: CallOverrides): Promise<{
    caller: string;
    maxBuyTick: number;
    minSellTick: number;
    optionTokenDebt: BigNumber;
    quoteTokenDebt: BigNumber;
    feePayable: BigNumber;
    0: string;
    1: number;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takerFee(overrides?: CallOverrides): Promise<BigNumber>;

  "takerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  tickBitMaps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tickBitMaps(uint8)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tickInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    first: BigNumber;
    last: BigNumber;
    totalDownsizedOptionAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "tickInfos(uint16)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    first: BigNumber;
    last: BigNumber;
    totalDownsizedOptionAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  tickPriceModel(overrides?: CallOverrides): Promise<string>;

  "tickPriceModel()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_ONE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_ONE_PERCENT_PRECISION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(uint256)"(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTime(overrides?: CallOverrides): Promise<BigNumber>;

    "closeTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    downsizingScale(overrides?: CallOverrides): Promise<BigNumber>;

    "downsizingScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeCallback(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "feeCallback(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    "feeCollector()"(overrides?: CallOverrides): Promise<string>;

    getOrderbook(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      buyTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      sellTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      0: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      1: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    }>;

    "getOrderbook(uint256)"(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      buyTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      sellTicks: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      0: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
      1: { tick: number; amount: BigNumber; 0: number; 1: BigNumber }[];
    }>;

    initialize(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,address,address,address,address,uint256,uint256,uint256,uint256)"(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "makerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumOrderAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumOrderAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextOrderIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    openShortcut(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "openShortcut(uint256,uint256)"(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openTime(overrides?: CallOverrides): Promise<BigNumber>;

    "openTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "optionTokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionTokens(overrides?: CallOverrides): Promise<string>;

    "optionTokens()"(overrides?: CallOverrides): Promise<string>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      downsizedOptionAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      downsizedOptionAmount: BigNumber;
      0: string;
      1: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    placeBuyOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "placeBuyOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    placeSellOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "placeSellOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    "quoteToken()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setCaller(_caller: string, overrides?: CallOverrides): Promise<void>;

    "setCaller(address)"(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCloseTime(uint256)"(
      _closeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMakerFee(
      _makerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMakerFee(int256)"(
      _makerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumOrderAmount(
      _minimumOrderAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumOrderAmount(uint256)"(
      _minimumOrderAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOpenTime(uint256)"(
      _openTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTakerFee(
      _takerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTakerFee(int256)"(
      _takerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleDebt(overrides?: CallOverrides): Promise<void>;

    "settleDebt()"(overrides?: CallOverrides): Promise<void>;

    slot(overrides?: CallOverrides): Promise<{
      caller: string;
      maxBuyTick: number;
      minSellTick: number;
      optionTokenDebt: BigNumber;
      quoteTokenDebt: BigNumber;
      feePayable: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "slot()"(overrides?: CallOverrides): Promise<{
      caller: string;
      maxBuyTick: number;
      minSellTick: number;
      optionTokenDebt: BigNumber;
      quoteTokenDebt: BigNumber;
      feePayable: BigNumber;
      0: string;
      1: number;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "takerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickBitMaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickBitMaps(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      first: BigNumber;
      last: BigNumber;
      totalDownsizedOptionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "tickInfos(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      first: BigNumber;
      last: BigNumber;
      totalDownsizedOptionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    tickPriceModel(overrides?: CallOverrides): Promise<string>;

    "tickPriceModel()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    BeaconUpgraded(beacon: string | null): EventFilter;

    CancelOrder(orderId: BigNumberish | null): EventFilter;

    Initialized(version: null): EventFilter;

    MakeOrder(
      orderId: BigNumberish | null,
      owner: null,
      optionAmount: null,
      isBuy: null
    ): EventFilter;

    MatchOrder(
      makerOrderId: BigNumberish | null,
      taker: null,
      optionAmount: null
    ): EventFilter;

    OpenShortcut(fromOrderId: null, toOrderId: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimateGas: {
    FEE_ONE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_ONE_PERCENT_PRECISION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrder(uint256)"(
      _orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeTime(overrides?: CallOverrides): Promise<BigNumber>;

    "closeTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    downsizingScale(overrides?: CallOverrides): Promise<BigNumber>;

    "downsizingScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeCallback(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "feeCallback(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    "feeCollector()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderbook(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderbook(uint256)"(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,address,address,address,address,uint256,uint256,uint256,uint256)"(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    makerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "makerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumOrderAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumOrderAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextOrderIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextOrderIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    openShortcut(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openShortcut(uint256,uint256)"(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    openTime(overrides?: CallOverrides): Promise<BigNumber>;

    "openTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "optionTokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "optionTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    placeBuyOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "placeBuyOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    placeSellOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "placeSellOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCaller(_caller: string, overrides?: Overrides): Promise<BigNumber>;

    "setCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCloseTime(uint256)"(
      _closeTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMakerFee(
      _makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMakerFee(int256)"(
      _makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumOrderAmount(
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumOrderAmount(uint256)"(
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOpenTime(uint256)"(
      _openTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTakerFee(
      _takerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTakerFee(int256)"(
      _takerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleDebt(overrides?: Overrides): Promise<BigNumber>;

    "settleDebt()"(overrides?: Overrides): Promise<BigNumber>;

    slot(overrides?: CallOverrides): Promise<BigNumber>;

    "slot()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "takerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    tickBitMaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickBitMaps(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tickInfos(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickPriceModel(overrides?: CallOverrides): Promise<BigNumber>;

    "tickPriceModel()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_ONE_PERCENT_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FEE_ONE_PERCENT_PRECISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder(uint256)"(
      _orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "closeTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    downsizingScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "downsizingScale()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeCallback(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "feeCallback(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeCollector()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderbook(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderbook(uint256)"(
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,address,address,address,address,uint256,uint256,uint256,uint256)"(
      _optionTokens: string,
      _optionTokenId: BigNumberish,
      _quoteToken: string,
      _router: string,
      _feeCollector: string,
      _tickPriceModel: string,
      _downsizingScale: BigNumberish,
      _openTime: BigNumberish,
      _closeTime: BigNumberish,
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    makerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "makerFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumOrderAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumOrderAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextOrderIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextOrderIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    openShortcut(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openShortcut(uint256,uint256)"(
      _fromOrderId: BigNumberish,
      _toOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    openTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "openTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionTokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBuyOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "placeBuyOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    placeSellOrder(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "placeSellOrder((uint256,uint16,bool))"(
      _orderParam: {
        optionAmount: BigNumberish;
        tick: BigNumberish;
        isBuy: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCaller(
      _caller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCaller(address)"(
      _caller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCloseTime(uint256)"(
      _closeTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMakerFee(
      _makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMakerFee(int256)"(
      _makerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumOrderAmount(
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumOrderAmount(uint256)"(
      _minimumOrderAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOpenTime(uint256)"(
      _openTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTakerFee(
      _takerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTakerFee(int256)"(
      _takerFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleDebt(overrides?: Overrides): Promise<PopulatedTransaction>;

    "settleDebt()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    slot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "slot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "takerFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickBitMaps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickBitMaps(uint8)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tickInfos(uint16)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickPriceModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tickPriceModel()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
